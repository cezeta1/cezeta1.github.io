import * as i0 from '@angular/core';
import { Component, ViewEncapsulation, ChangeDetectionStrategy, Directive, Input, inject } from '@angular/core';
import { tuiWithStyles } from '@taiga-ui/cdk/utils/miscellaneous';
import { tuiButtonOptionsProvider } from '@taiga-ui/core/components/button';
import { tuiNotificationOptionsProvider } from '@taiga-ui/core/components/notification';
import * as i1 from '@taiga-ui/core/components/textfield';
import { TuiTextfieldOptionsDirective } from '@taiga-ui/core/components/textfield';
import { TUI_SEGMENTED_OPTIONS } from '@taiga-ui/kit/components/segmented';
import { TUI_SWITCH_OPTIONS } from '@taiga-ui/kit/components/switch';
import { TUI_HEADER_OPTIONS } from '@taiga-ui/layout/components/header';

const HEADER_SIZE = {
    s: 'xxxs',
    m: 'xs',
    l: 's',
};
class TuiFormStyles {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFormStyles, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiFormStyles, isStandalone: true, selector: "ng-component", host: { classAttribute: "tui-form" }, ngImport: i0, template: '', isInline: true, styles: ["[tuiForm]{display:flex;flex-direction:column;align-items:stretch}[tuiForm][data-size=s]{gap:.75rem;font:var(--tui-font-text-s)}[tuiForm][data-size=s] tui-error:not(.tui-space-top-none){margin-top:-.75rem}[tuiForm][data-size=s] [tuiHeader]{padding-bottom:.5rem}[tuiForm][data-size=s] [tuiHeader] [tuiSubtitle]{font:var(--tui-font-text-ui-s)}[tuiForm][data-size=m]{gap:1rem;font:var(--tui-font-text-s)}[tuiForm][data-size=m] tui-error:not(.tui-space-top-none){margin-top:-1rem}[tuiForm][data-size=l]{gap:1.25rem;font:var(--tui-font-text-m)}[tuiForm][data-size=l] tui-error:not(.tui-space-top-none){margin-top:-1.25rem}[tuiForm] [tuiHeader]{padding-bottom:.25rem}[tuiForm] footer{display:flex;gap:.75rem;margin-top:.25rem}[tuiForm] [tuiLabel]:not([data-orientation=vertical]){font:inherit}[tuiForm][data-size=s] [tuiLabel]:not([data-orientation=vertical]) [tuiTooltip],[tuiForm][data-size=m] [tuiLabel]:not([data-orientation=vertical]) [tuiTooltip]{block-size:1.25rem}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiFormStyles, decorators: [{
            type: Component,
            args: [{ standalone: true, template: '', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        class: 'tui-form',
                    }, styles: ["[tuiForm]{display:flex;flex-direction:column;align-items:stretch}[tuiForm][data-size=s]{gap:.75rem;font:var(--tui-font-text-s)}[tuiForm][data-size=s] tui-error:not(.tui-space-top-none){margin-top:-.75rem}[tuiForm][data-size=s] [tuiHeader]{padding-bottom:.5rem}[tuiForm][data-size=s] [tuiHeader] [tuiSubtitle]{font:var(--tui-font-text-ui-s)}[tuiForm][data-size=m]{gap:1rem;font:var(--tui-font-text-s)}[tuiForm][data-size=m] tui-error:not(.tui-space-top-none){margin-top:-1rem}[tuiForm][data-size=l]{gap:1.25rem;font:var(--tui-font-text-m)}[tuiForm][data-size=l] tui-error:not(.tui-space-top-none){margin-top:-1.25rem}[tuiForm] [tuiHeader]{padding-bottom:.25rem}[tuiForm] footer{display:flex;gap:.75rem;margin-top:.25rem}[tuiForm] [tuiLabel]:not([data-orientation=vertical]){font:inherit}[tuiForm][data-size=s] [tuiLabel]:not([data-orientation=vertical]) [tuiTooltip],[tuiForm][data-size=m] [tuiLabel]:not([data-orientation=vertical]) [tuiTooltip]{block-size:1.25rem}\n"] }]
        }] });
class TuiForm {
    constructor() {
        this.nothing = tuiWithStyles(TuiFormStyles);
        this.size = 'l';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiForm, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiForm, isStandalone: true, selector: "[tuiForm]", inputs: { size: ["tuiForm", "size"] }, host: { attributes: { "tuiForm": "" }, properties: { "attr.data-size": "size" } }, providers: [
            tuiButtonOptionsProvider(TuiForm),
            tuiNotificationOptionsProvider(TuiForm),
            projectSize(TUI_HEADER_OPTIONS, (size) => HEADER_SIZE[size]),
            projectSize(TUI_SWITCH_OPTIONS, (size) => (size === 'l' ? 'm' : 's')),
            projectSize(TUI_SEGMENTED_OPTIONS, (size) => (size === 'l' ? 'm' : 's')),
        ], hostDirectives: [{ directive: i1.TuiTextfieldOptionsDirective, inputs: ["tuiTextfieldSize", "tuiForm", "tuiTextfieldAppearance", "tuiTextfieldAppearance", "tuiTextfieldCleaner", "tuiTextfieldCleaner"] }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiForm, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiForm]',
                    providers: [
                        tuiButtonOptionsProvider(TuiForm),
                        tuiNotificationOptionsProvider(TuiForm),
                        projectSize(TUI_HEADER_OPTIONS, (size) => HEADER_SIZE[size]),
                        projectSize(TUI_SWITCH_OPTIONS, (size) => (size === 'l' ? 'm' : 's')),
                        projectSize(TUI_SEGMENTED_OPTIONS, (size) => (size === 'l' ? 'm' : 's')),
                    ],
                    hostDirectives: [
                        {
                            directive: TuiTextfieldOptionsDirective,
                            inputs: [
                                'tuiTextfieldSize: tuiForm',
                                'tuiTextfieldAppearance',
                                'tuiTextfieldCleaner',
                            ],
                        },
                    ],
                    host: {
                        tuiForm: '',
                        '[attr.data-size]': 'size',
                    },
                }]
        }], propDecorators: { size: [{
                type: Input,
                args: ['tuiForm']
            }] } });
function projectSize(provide, project) {
    return {
        provide,
        useFactory: () => ({
            ...inject(provide, { skipSelf: true }),
            size: project(inject(TuiForm).size),
        }),
    };
}

/**
 * Generated bundle index. Do not edit.
 */

export { TuiForm };
//# sourceMappingURL=taiga-ui-layout-components-form.mjs.map
