import { DOCUMENT } from '@angular/common';
import { ContentChild, Directive, ElementRef, inject, Input } from '@angular/core';
import { toObservable } from '@angular/core/rxjs-interop';
import { TuiActiveZone } from '@taiga-ui/cdk/directives/active-zone';
import { tuiTypedFromEvent, tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { tuiGetActualTarget, tuiInjectElement, tuiIsElement, } from '@taiga-ui/cdk/utils/dom';
import { tuiAsDriver, TuiDriver } from '@taiga-ui/core/classes';
import { delay, distinctUntilChanged, filter, fromEvent, map, merge, of, share, startWith, switchMap, takeUntil, tap, } from 'rxjs';
import { TuiDropdownDirective } from './dropdown.directive';
import { TUI_DROPDOWN_HOVER_OPTIONS } from './dropdown-hover.options';
import { TuiDropdownOpen } from './dropdown-open.directive';
import * as i0 from "@angular/core";
class TuiDropdownHover extends TuiDriver {
    constructor() {
        super((subscriber) => this.stream$.subscribe(subscriber));
        this.el = tuiInjectElement();
        this.doc = inject(DOCUMENT);
        this.options = inject(TUI_DROPDOWN_HOVER_OPTIONS);
        this.activeZone = inject(TuiActiveZone);
        this.open = inject(TuiDropdownOpen, { optional: true });
        /**
         * Dropdown can be removed not only via click/touch –
         * swipe on mobile devices removes dropdown sheet without triggering new mouseover / mouseout events.
         */
        this.dropdownExternalRemoval$ = toObservable(inject(TuiDropdownDirective).ref).pipe(filter((x) => !x && this.hovered));
        this.stream$ = merge(this.dropdownExternalRemoval$.pipe(switchMap(() => tuiTypedFromEvent(this.doc, 'pointerdown').pipe(map(tuiGetActualTarget), delay(this.hideDelay), startWith(null), takeUntil(fromEvent(this.doc, 'mouseover'))))), tuiTypedFromEvent(this.doc, 'mouseover').pipe(map(tuiGetActualTarget)), tuiTypedFromEvent(this.doc, 'mouseout').pipe(map((e) => e.relatedTarget))).pipe(map((element) => tuiIsElement(element) && this.isHovered(element)), distinctUntilChanged(), switchMap((v) => of(v).pipe(delay(v ? this.showDelay : this.hideDelay))), tuiZoneOptimized(), tap((hovered) => {
            this.hovered = hovered;
            this.open?.toggle(hovered);
        }), share());
        this.showDelay = this.options.showDelay;
        this.hideDelay = this.options.hideDelay;
        this.hovered = false;
        this.type = 'dropdown';
    }
    onClick(event) {
        if (this.hovered && this.open) {
            event.preventDefault();
        }
    }
    isHovered(element) {
        const host = this.dropdownHost?.nativeElement || this.el;
        const hovered = host.contains(element);
        const child = !this.el.contains(element) && this.activeZone.contains(element);
        return hovered || child;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiDropdownHover, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.12", type: TuiDropdownHover, isStandalone: true, selector: "[tuiDropdownHover]", inputs: { showDelay: ["tuiDropdownShowDelay", "showDelay"], hideDelay: ["tuiDropdownHideDelay", "hideDelay"] }, host: { listeners: { "click.capture": "onClick($event)" } }, providers: [TuiActiveZone, tuiAsDriver(TuiDropdownHover)], queries: [{ propertyName: "dropdownHost", first: true, predicate: ["tuiDropdownHost"], descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0 }); }
}
export { TuiDropdownHover };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiDropdownHover, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[tuiDropdownHover]',
                    providers: [TuiActiveZone, tuiAsDriver(TuiDropdownHover)],
                    host: {
                        '(click.capture)': 'onClick($event)',
                    },
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { dropdownHost: [{
                type: ContentChild,
                args: ['tuiDropdownHost', { descendants: true, read: ElementRef }]
            }], showDelay: [{
                type: Input,
                args: ['tuiDropdownShowDelay']
            }], hideDelay: [{
                type: Input,
                args: ['tuiDropdownHideDelay']
            }] } });
//# sourceMappingURL=data:application/json;base64,