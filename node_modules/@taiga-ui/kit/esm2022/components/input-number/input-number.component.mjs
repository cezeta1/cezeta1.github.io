import { NgIf } from '@angular/common';
import { ChangeDetectionStrategy, Component, computed, effect, inject, Input, signal, ViewEncapsulation, } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { MaskitoDirective } from '@maskito/angular';
import { maskitoInitialCalibrationPlugin } from '@maskito/core';
import { maskitoCaretGuard, maskitoNumberOptionsGenerator, maskitoParseNumber, } from '@maskito/kit';
import { tuiAsControl, TuiControl, tuiValueTransformerFrom } from '@taiga-ui/cdk/classes';
import { CHAR_HYPHEN, CHAR_MINUS, TUI_ALLOW_SIGNAL_WRITES } from '@taiga-ui/cdk/constants';
import { TUI_IS_IOS, tuiFallbackValueProvider } from '@taiga-ui/cdk/tokens';
import { tuiInjectElement, tuiValueBinding } from '@taiga-ui/cdk/utils/dom';
import { tuiClamp, tuiIsSafeToRound } from '@taiga-ui/cdk/utils/math';
import { TuiButton } from '@taiga-ui/core/components/button';
import { TUI_TEXTFIELD_OPTIONS, TuiTextfieldContent, TuiWithTextfield, } from '@taiga-ui/core/components/textfield';
import { TUI_DEFAULT_NUMBER_FORMAT, TUI_NUMBER_FORMAT } from '@taiga-ui/core/tokens';
import { tuiFormatNumber } from '@taiga-ui/core/utils/format';
import { tuiMaskito } from '@taiga-ui/kit/utils';
import { TUI_INPUT_NUMBER_OPTIONS } from './input-number.options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
import * as i2 from "@maskito/angular";
const DEFAULT_MAX_LENGTH = 18;
class TuiInputNumber extends TuiControl {
    constructor() {
        super(...arguments);
        this.isIOS = inject(TUI_IS_IOS);
        this.numberFormat = toSignal(inject(TUI_NUMBER_FORMAT), {
            initialValue: TUI_DEFAULT_NUMBER_FORMAT,
        });
        this.precision = computed(() => Number.isNaN(this.numberFormat().precision) ? 2 : this.numberFormat().precision);
        this.isIntermediateState = computed(() => {
            const value = maskitoParseNumber(this.textfieldValue(), this.numberFormat().decimalSeparator);
            return value < 0 ? value > this.max() : value < this.min();
        });
        this.onChangeEffect = effect(() => {
            const value = maskitoParseNumber(this.textfieldValue(), this.numberFormat().decimalSeparator);
            if (Number.isNaN(value)) {
                this.onChange(null);
                return;
            }
            if (this.isIntermediateState() ||
                value < this.min() ||
                value > this.max() ||
                this.value() === value) {
                return;
            }
            this.onChange(value);
        }, TUI_ALLOW_SIGNAL_WRITES);
        this.options = inject(TUI_INPUT_NUMBER_OPTIONS);
        this.min = signal(this.options.min);
        this.max = signal(this.options.max);
        this.step = signal(this.options.step);
        this.prefix = signal(this.options.prefix);
        this.postfix = signal(this.options.postfix);
        this.textfieldOptions = inject(TUI_TEXTFIELD_OPTIONS);
        this.element = tuiInjectElement();
        this.textfieldValue = tuiValueBinding();
        this.inputMode = computed(() => {
            if (this.isIOS && this.min() < 0) {
                // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'
                return 'text';
            }
            return this.precision() ? 'decimal' : 'numeric';
        });
        this.maxLength = computed(() => {
            const { decimalSeparator, thousandSeparator } = this.numberFormat();
            const decimalPart = !!this.precision() && this.textfieldValue().includes(decimalSeparator);
            const precision = decimalPart ? Math.min(this.precision() + 1, 20) : 0;
            const takeThousand = thousandSeparator.repeat(5).length;
            return DEFAULT_MAX_LENGTH + precision + takeThousand;
        });
        this.mask = tuiMaskito(computed(({ decimalMode, ...numberFormat } = this.numberFormat()) => this.computeMask({
            ...numberFormat,
            precision: this.precision(),
            min: this.min(),
            max: this.max(),
            prefix: this.prefix(),
            postfix: this.postfix(),
            decimalZeroPadding: decimalMode === 'always',
        })));
    }
    set minSetter(x) {
        this.updateMinMaxLimits(x, this.max());
    }
    set maxSetter(x) {
        this.updateMinMaxLimits(this.min(), x);
    }
    // TODO(v5): replace with signal input
    set prefixSetter(x) {
        this.prefix.set(x);
    }
    // TODO(v5): replace with signal input
    set postfixSetter(x) {
        this.postfix.set(x);
    }
    // TODO(v5): replace with signal input
    set stepSetter(x) {
        this.step.set(x);
    }
    writeValue(value) {
        super.writeValue(value);
        this.textfieldValue.set(this.formatNumber(this.value()));
    }
    onBlur() {
        this.onTouched();
        if (!this.isIntermediateState()) {
            this.textfieldValue.set(this.formatNumber(this.value()));
        }
    }
    onFocus() {
        const value = maskitoParseNumber(this.textfieldValue(), this.numberFormat().decimalSeparator);
        if (Number.isNaN(value) && !this.readOnly()) {
            this.textfieldValue.set(this.prefix() + this.postfix());
        }
    }
    onStep(step) {
        this.textfieldValue.set(this.formatNumber(tuiClamp((this.value() ?? 0) + step, this.min(), this.max())));
    }
    formatNumber(value) {
        if (value === null) {
            return '';
        }
        return (this.prefix() +
            tuiFormatNumber(value, {
                ...this.numberFormat(),
                /**
                 * Number can satisfy interval [Number.MIN_SAFE_INTEGER; Number.MAX_SAFE_INTEGER]
                 * but its rounding can violate it.
                 * Before BigInt support there is no perfect solution – only trade off.
                 * No rounding is better than lose precision and incorrect mutation of already valid value.
                 */
                precision: tuiIsSafeToRound(value, this.precision())
                    ? this.precision()
                    : Infinity,
            }).replace(CHAR_HYPHEN, CHAR_MINUS) +
            this.postfix());
    }
    updateMinMaxLimits(nullableMin, nullableMax) {
        const min = this.transformer?.fromControlValue(nullableMin) ??
            nullableMin ??
            this.options.min;
        const max = this.transformer?.fromControlValue(nullableMax) ??
            nullableMax ??
            this.options.max;
        this.min.set(Math.min(min, max));
        this.max.set(Math.max(min, max));
    }
    computeMask(params) {
        const { prefix = '', postfix = '' } = params;
        const { plugins, ...options } = maskitoNumberOptionsGenerator(params);
        const initialCalibrationPlugin = maskitoInitialCalibrationPlugin(maskitoNumberOptionsGenerator({
            ...params,
            min: Number.MIN_SAFE_INTEGER,
            max: Number.MAX_SAFE_INTEGER,
        }));
        return {
            ...options,
            plugins: [
                ...plugins,
                initialCalibrationPlugin,
                maskitoCaretGuard((value) => [
                    prefix.length,
                    value.length - postfix.length,
                ]),
            ],
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputNumber, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputNumber, isStandalone: true, selector: "input[tuiInputNumber]", inputs: { minSetter: ["min", "minSetter"], maxSetter: ["max", "maxSetter"], prefixSetter: ["prefix", "prefixSetter"], postfixSetter: ["postfix", "postfixSetter"], stepSetter: ["step", "stepSetter"] }, host: { listeners: { "input": "textfieldValue.set(element.value)", "blur": "onBlur()", "focus": "onFocus()", "keydown.arrowDown": "onStep(-step())", "keydown.arrowUp": "onStep(step())" }, properties: { "disabled": "disabled()", "attr.inputMode": "inputMode()", "attr.maxLength": "maxLength()", "class._with-buttons": "step()" } }, providers: [
            tuiAsControl(TuiInputNumber),
            tuiFallbackValueProvider(null),
            tuiValueTransformerFrom(TUI_INPUT_NUMBER_OPTIONS),
        ], usesInheritance: true, hostDirectives: [{ directive: i1.TuiWithTextfield }, { directive: i2.MaskitoDirective }], ngImport: i0, template: "<ng-container *tuiTextfieldContent>\n    <section\n        *ngIf=\"step()\"\n        class=\"t-input-number-buttons\"\n    >\n        <button\n            size=\"s\"\n            tabindex=\"-1\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-button\"\n            [appearance]=\"textfieldOptions.appearance()\"\n            [disabled]=\"!interactive() || value()! >= max()\"\n            [iconStart]=\"options.icons.increase\"\n            (click.prevent)=\"onStep(step())\"\n            (mousedown.prevent)=\"element.focus()\"\n        >\n            +\n        </button>\n\n        <button\n            size=\"s\"\n            tabindex=\"-1\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-button\"\n            [appearance]=\"textfieldOptions.appearance()\"\n            [disabled]=\"!interactive() || value()! <= min()\"\n            [iconStart]=\"options.icons.decrease\"\n            (click.prevent)=\"onStep(-step())\"\n            (mousedown.prevent)=\"element.focus()\"\n        >\n            -\n        </button>\n    </section>\n</ng-container>\n", styles: [".t-input-number-buttons.t-input-number-buttons{position:absolute;right:0;display:flex;block-size:var(--t-height);flex-direction:column;gap:.125rem;border-radius:inherit}tui-textfield[data-size=s] .t-input-number-buttons.t-input-number-buttons{flex-direction:row-reverse}.t-input-number-buttons.t-input-number-buttons>*{flex:1 1 0;border-radius:0}.t-input-number-buttons.t-input-number-buttons>*:first-child{border-start-end-radius:inherit}.t-input-number-buttons.t-input-number-buttons>*:last-child{border-end-end-radius:inherit}tui-textfield[data-size=l] .t-input-number-buttons.t-input-number-buttons>*{inline-size:var(--tui-height-m)}tui-textfield[data-size=s] .t-input-number-buttons.t-input-number-buttons>*:first-child{border-start-end-radius:inherit;border-end-end-radius:inherit}tui-textfield[data-size=s] .t-input-number-buttons.t-input-number-buttons>*:last-child{border-radius:0}[tuiInputNumber]._with-buttons{border-start-end-radius:0;border-end-end-radius:0}tui-textfield[data-size=l]{--t-input-number-offset-end: calc(var(--tui-height-m) + .125rem)}tui-textfield[data-size=m]{--t-input-number-offset-end: calc(var(--tui-height-s) + .125rem)}tui-textfield[data-size=s]{--t-input-number-offset-end: calc(2 * var(--tui-height-s) + .25rem)}[tuiInputNumber]._with-buttons,[tuiInputNumber]._with-buttons~.t-template{inline-size:calc(100% - var(--t-input-number-offset-end))}[tuiInputNumber]._with-buttons~.t-content{margin-inline-end:var(--t-input-number-offset-end)}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: TuiButton, selector: "a[tuiButton],button[tuiButton],a[tuiIconButton],button[tuiIconButton]", inputs: ["size"] }, { kind: "directive", type: TuiTextfieldContent, selector: "ng-template[tuiTextfieldContent]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
export { TuiInputNumber };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputNumber, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'input[tuiInputNumber]', imports: [NgIf, TuiButton, TuiTextfieldContent], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        tuiAsControl(TuiInputNumber),
                        tuiFallbackValueProvider(null),
                        tuiValueTransformerFrom(TUI_INPUT_NUMBER_OPTIONS),
                    ], hostDirectives: [TuiWithTextfield, MaskitoDirective], host: {
                        '[disabled]': 'disabled()',
                        '[attr.inputMode]': 'inputMode()',
                        '[attr.maxLength]': 'maxLength()',
                        '(input)': 'textfieldValue.set(element.value)',
                        '(blur)': 'onBlur()',
                        '(focus)': 'onFocus()',
                        '(keydown.arrowDown)': 'onStep(-step())',
                        '(keydown.arrowUp)': 'onStep(step())',
                        '[class._with-buttons]': 'step()',
                    }, template: "<ng-container *tuiTextfieldContent>\n    <section\n        *ngIf=\"step()\"\n        class=\"t-input-number-buttons\"\n    >\n        <button\n            size=\"s\"\n            tabindex=\"-1\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-button\"\n            [appearance]=\"textfieldOptions.appearance()\"\n            [disabled]=\"!interactive() || value()! >= max()\"\n            [iconStart]=\"options.icons.increase\"\n            (click.prevent)=\"onStep(step())\"\n            (mousedown.prevent)=\"element.focus()\"\n        >\n            +\n        </button>\n\n        <button\n            size=\"s\"\n            tabindex=\"-1\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-button\"\n            [appearance]=\"textfieldOptions.appearance()\"\n            [disabled]=\"!interactive() || value()! <= min()\"\n            [iconStart]=\"options.icons.decrease\"\n            (click.prevent)=\"onStep(-step())\"\n            (mousedown.prevent)=\"element.focus()\"\n        >\n            -\n        </button>\n    </section>\n</ng-container>\n", styles: [".t-input-number-buttons.t-input-number-buttons{position:absolute;right:0;display:flex;block-size:var(--t-height);flex-direction:column;gap:.125rem;border-radius:inherit}tui-textfield[data-size=s] .t-input-number-buttons.t-input-number-buttons{flex-direction:row-reverse}.t-input-number-buttons.t-input-number-buttons>*{flex:1 1 0;border-radius:0}.t-input-number-buttons.t-input-number-buttons>*:first-child{border-start-end-radius:inherit}.t-input-number-buttons.t-input-number-buttons>*:last-child{border-end-end-radius:inherit}tui-textfield[data-size=l] .t-input-number-buttons.t-input-number-buttons>*{inline-size:var(--tui-height-m)}tui-textfield[data-size=s] .t-input-number-buttons.t-input-number-buttons>*:first-child{border-start-end-radius:inherit;border-end-end-radius:inherit}tui-textfield[data-size=s] .t-input-number-buttons.t-input-number-buttons>*:last-child{border-radius:0}[tuiInputNumber]._with-buttons{border-start-end-radius:0;border-end-end-radius:0}tui-textfield[data-size=l]{--t-input-number-offset-end: calc(var(--tui-height-m) + .125rem)}tui-textfield[data-size=m]{--t-input-number-offset-end: calc(var(--tui-height-s) + .125rem)}tui-textfield[data-size=s]{--t-input-number-offset-end: calc(2 * var(--tui-height-s) + .25rem)}[tuiInputNumber]._with-buttons,[tuiInputNumber]._with-buttons~.t-template{inline-size:calc(100% - var(--t-input-number-offset-end))}[tuiInputNumber]._with-buttons~.t-content{margin-inline-end:var(--t-input-number-offset-end)}\n"] }]
        }], propDecorators: { minSetter: [{
                type: Input,
                args: ['min']
            }], maxSetter: [{
                type: Input,
                args: ['max']
            }], prefixSetter: [{
                type: Input,
                args: ['prefix']
            }], postfixSetter: [{
                type: Input,
                args: ['postfix']
            }], stepSetter: [{
                type: Input,
                args: ['step']
            }] } });
//# sourceMappingURL=data:application/json;base64,