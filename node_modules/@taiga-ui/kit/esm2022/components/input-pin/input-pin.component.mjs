import { ChangeDetectionStrategy, Component, computed, inject, Input, signal, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { MaskitoDirective } from '@maskito/angular';
import { TuiRepeatTimes } from '@taiga-ui/cdk/directives/repeat-times';
import { tuiInjectElement } from '@taiga-ui/cdk/utils/dom';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { tuiIsString } from '@taiga-ui/cdk/utils/miscellaneous';
import { TUI_TEXTFIELD_OPTIONS, TuiTextfieldContent, } from '@taiga-ui/core/components/textfield';
import { TuiAppearance } from '@taiga-ui/core/directives/appearance';
import { tuiMaskito } from '@taiga-ui/kit/utils';
import * as i0 from "@angular/core";
import * as i1 from "@maskito/angular";
class TuiInputPin {
    constructor() {
        this.el = tuiInjectElement();
        this.mask = signal(/^\d+$/);
        this.appearance = inject(TUI_TEXTFIELD_OPTIONS).appearance;
        this.control = inject(NgControl);
        this.maskito = tuiMaskito(computed(() => ({
            mask: this.mask(),
            overwriteMode: 'replace',
        })));
    }
    set maskSetter(mask) {
        this.mask.set(tuiIsString(mask) ? new RegExp(mask) : mask);
    }
    onClick(index) {
        this.el.focus();
        this.el.setSelectionRange(index, index + 1);
    }
    onSelection() {
        if (this.el.selectionStart === this.el.maxLength) {
            this.el.setSelectionRange(this.el.maxLength - 1, this.el.maxLength);
        }
    }
    onArrow() {
        if (this.el.selectionStart === this.el.maxLength - 1 &&
            this.el.selectionEnd === this.el.maxLength) {
            this.el.setSelectionRange(this.el.maxLength - 2, this.el.maxLength - 2);
        }
    }
    isFocused(index) {
        return (tuiIsNativeFocused(this.el) &&
            (this.el.selectionStart === index ||
                (this.el.selectionStart === this.el.maxLength &&
                    index === this.el.maxLength - 1)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPin, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TuiInputPin, isStandalone: true, selector: "input[tuiInputPin]", inputs: { maskSetter: ["mask", "maskSetter"] }, host: { attributes: { "inputmode": "numeric", "spellcheck": "false" }, listeners: { "selectionchange": "onSelection()", "keydown.arrowLeft": "onArrow()" } }, hostDirectives: [{ directive: i1.MaskitoDirective }], ngImport: i0, template: "<div\n    *tuiTextfieldContent\n    class=\"t-wrapper\"\n>\n    <label\n        *tuiRepeatTimes=\"let index of el.maxLength\"\n        class=\"t-item\"\n        [tuiAppearance]=\"appearance()\"\n        [tuiAppearanceFocus]=\"isFocused(index)\"\n        [tuiAppearanceMode]=\"control.invalid && control.touched ? 'invalid' : null\"\n        (mousedown.prevent)=\"onClick(index)\"\n    >\n        <span\n            class=\"t-value\"\n            [class.t-value_filled]=\"el.value[index]\"\n            [textContent]=\"el.value[index] || el.placeholder[index]\"\n        ></span>\n    </label>\n</div>\n", styles: ["@keyframes blink{50%{opacity:0}}:host{color:transparent;caret-color:transparent;background:transparent;border:none;outline:none}:host::selection{background:transparent}:host::placeholder{color:transparent}:host ::ng-deep+.t-content .t-clear{display:none!important}.t-wrapper{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;display:flex;gap:inherit;border-radius:inherit}.t-item{display:flex;flex:1;align-items:center;justify-content:center;border-radius:inherit;pointer-events:auto;cursor:text}.t-item[data-focus=true] .t-value_filled{background:var(--tui-service-selection-background)}.t-item[data-focus=true] .t-value_filled:before{display:none}.t-item[data-focus=true] .t-value:before{content:\"\";block-size:1em;border-left:1px solid var(--tui-text-primary);animation:blink 1s steps(1) infinite}.t-value{color:var(--tui-text-tertiary)}.t-value_filled{color:var(--tui-text-primary)}\n"], dependencies: [{ kind: "directive", type: TuiAppearance, selector: "[tuiAppearance]", inputs: ["tuiAppearance", "tuiAppearanceState", "tuiAppearanceFocus", "tuiAppearanceMode"] }, { kind: "directive", type: TuiRepeatTimes, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }, { kind: "directive", type: TuiTextfieldContent, selector: "ng-template[tuiTextfieldContent]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
export { TuiInputPin };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TuiInputPin, decorators: [{
            type: Component,
            args: [{ standalone: true, selector: 'input[tuiInputPin]', imports: [TuiAppearance, TuiRepeatTimes, TuiTextfieldContent], changeDetection: ChangeDetectionStrategy.OnPush, hostDirectives: [MaskitoDirective], host: {
                        inputmode: 'numeric',
                        spellcheck: 'false',
                        '(selectionchange)': 'onSelection()',
                        '(keydown.arrowLeft)': 'onArrow()',
                    }, template: "<div\n    *tuiTextfieldContent\n    class=\"t-wrapper\"\n>\n    <label\n        *tuiRepeatTimes=\"let index of el.maxLength\"\n        class=\"t-item\"\n        [tuiAppearance]=\"appearance()\"\n        [tuiAppearanceFocus]=\"isFocused(index)\"\n        [tuiAppearanceMode]=\"control.invalid && control.touched ? 'invalid' : null\"\n        (mousedown.prevent)=\"onClick(index)\"\n    >\n        <span\n            class=\"t-value\"\n            [class.t-value_filled]=\"el.value[index]\"\n            [textContent]=\"el.value[index] || el.placeholder[index]\"\n        ></span>\n    </label>\n</div>\n", styles: ["@keyframes blink{50%{opacity:0}}:host{color:transparent;caret-color:transparent;background:transparent;border:none;outline:none}:host::selection{background:transparent}:host::placeholder{color:transparent}:host ::ng-deep+.t-content .t-clear{display:none!important}.t-wrapper{position:absolute;top:0;left:0;inline-size:100%;block-size:100%;display:flex;gap:inherit;border-radius:inherit}.t-item{display:flex;flex:1;align-items:center;justify-content:center;border-radius:inherit;pointer-events:auto;cursor:text}.t-item[data-focus=true] .t-value_filled{background:var(--tui-service-selection-background)}.t-item[data-focus=true] .t-value_filled:before{display:none}.t-item[data-focus=true] .t-value:before{content:\"\";block-size:1em;border-left:1px solid var(--tui-text-primary);animation:blink 1s steps(1) infinite}.t-value{color:var(--tui-text-tertiary)}.t-value_filled{color:var(--tui-text-primary)}\n"] }]
        }], propDecorators: { maskSetter: [{
                type: Input,
                args: ['mask']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcGluLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2lucHV0LXBpbi9pbnB1dC1waW4uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaW5wdXQtcGluL2lucHV0LXBpbi50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFFBQVEsRUFDUixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHVDQUF1QyxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzdELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxtQ0FBbUMsQ0FBQztBQUM5RCxPQUFPLEVBQ0gscUJBQXFCLEVBQ3JCLG1CQUFtQixHQUN0QixNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQztBQUNuRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUJBQXFCLENBQUM7OztBQUUvQyxNQWVhLFdBQVc7SUFmeEI7UUFnQnVCLE9BQUUsR0FBRyxnQkFBZ0IsRUFBb0IsQ0FBQztRQUMxQyxTQUFJLEdBQUcsTUFBTSxDQUFjLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLGVBQVUsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDdEQsWUFBTyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUU1QixZQUFPLEdBQUcsVUFBVSxDQUNuQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztZQUNaLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2pCLGFBQWEsRUFBRSxTQUFTO1NBQzNCLENBQUMsQ0FBQyxDQUNOLENBQUM7S0FtQ0w7SUFqQ0csSUFDVyxVQUFVLENBQUMsSUFBMEI7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVNLE9BQU8sQ0FBQyxLQUFhO1FBQ3hCLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRTtZQUM5QyxJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3ZFO0lBQ0wsQ0FBQztJQUVNLE9BQU87UUFDVixJQUNJLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUM7WUFDaEQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEtBQUssSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQzVDO1lBQ0UsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDM0U7SUFDTCxDQUFDO0lBRU0sU0FBUyxDQUFDLEtBQWE7UUFDMUIsT0FBTyxDQUNILGtCQUFrQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDM0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsS0FBSyxLQUFLO2dCQUM3QixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUztvQkFDekMsS0FBSyxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQzVDLENBQUM7SUFDTixDQUFDOytHQTdDUSxXQUFXO21HQUFYLFdBQVcsa1ZDckN4Qiw0bEJBbUJBLGk4QkRNYyxhQUFhLHdKQUFFLGNBQWMsNkdBQUUsbUJBQW1COztTQVluRCxXQUFXOzRGQUFYLFdBQVc7a0JBZnZCLFNBQVM7aUNBQ00sSUFBSSxZQUNOLG9CQUFvQixXQUNyQixDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsbUJBQW1CLENBQUMsbUJBRzVDLHVCQUF1QixDQUFDLE1BQU0sa0JBQy9CLENBQUMsZ0JBQWdCLENBQUMsUUFDNUI7d0JBQ0YsU0FBUyxFQUFFLFNBQVM7d0JBQ3BCLFVBQVUsRUFBRSxPQUFPO3dCQUNuQixtQkFBbUIsRUFBRSxlQUFlO3dCQUNwQyxxQkFBcUIsRUFBRSxXQUFXO3FCQUNyQzs4QkFnQlUsVUFBVTtzQkFEcEIsS0FBSzt1QkFBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDb21wb25lbnQsXG4gICAgY29tcHV0ZWQsXG4gICAgaW5qZWN0LFxuICAgIElucHV0LFxuICAgIHNpZ25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtNYXNraXRvRGlyZWN0aXZlfSBmcm9tICdAbWFza2l0by9hbmd1bGFyJztcbmltcG9ydCB0eXBlIHtNYXNraXRvTWFza30gZnJvbSAnQG1hc2tpdG8vY29yZSc7XG5pbXBvcnQge1R1aVJlcGVhdFRpbWVzfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvcmVwZWF0LXRpbWVzJztcbmltcG9ydCB7dHVpSW5qZWN0RWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9kb20nO1xuaW1wb3J0IHt0dWlJc05hdGl2ZUZvY3VzZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZm9jdXMnO1xuaW1wb3J0IHt0dWlJc1N0cmluZ30gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscy9taXNjZWxsYW5lb3VzJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9PUFRJT05TLFxuICAgIFR1aVRleHRmaWVsZENvbnRlbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbXBvbmVudHMvdGV4dGZpZWxkJztcbmltcG9ydCB7VHVpQXBwZWFyYW5jZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvZGlyZWN0aXZlcy9hcHBlYXJhbmNlJztcbmltcG9ydCB7dHVpTWFza2l0b30gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgc2VsZWN0b3I6ICdpbnB1dFt0dWlJbnB1dFBpbl0nLFxuICAgIGltcG9ydHM6IFtUdWlBcHBlYXJhbmNlLCBUdWlSZXBlYXRUaW1lcywgVHVpVGV4dGZpZWxkQ29udGVudF0sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2lucHV0LXBpbi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9pbnB1dC1waW4uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIGhvc3REaXJlY3RpdmVzOiBbTWFza2l0b0RpcmVjdGl2ZV0sXG4gICAgaG9zdDoge1xuICAgICAgICBpbnB1dG1vZGU6ICdudW1lcmljJyxcbiAgICAgICAgc3BlbGxjaGVjazogJ2ZhbHNlJyxcbiAgICAgICAgJyhzZWxlY3Rpb25jaGFuZ2UpJzogJ29uU2VsZWN0aW9uKCknLFxuICAgICAgICAnKGtleWRvd24uYXJyb3dMZWZ0KSc6ICdvbkFycm93KCknLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUlucHV0UGluIHtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgZWwgPSB0dWlJbmplY3RFbGVtZW50PEhUTUxJbnB1dEVsZW1lbnQ+KCk7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IG1hc2sgPSBzaWduYWw8TWFza2l0b01hc2s+KC9eXFxkKyQvKTtcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgYXBwZWFyYW5jZSA9IGluamVjdChUVUlfVEVYVEZJRUxEX09QVElPTlMpLmFwcGVhcmFuY2U7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGNvbnRyb2wgPSBpbmplY3QoTmdDb250cm9sKTtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBtYXNraXRvID0gdHVpTWFza2l0byhcbiAgICAgICAgY29tcHV0ZWQoKCkgPT4gKHtcbiAgICAgICAgICAgIG1hc2s6IHRoaXMubWFzaygpLFxuICAgICAgICAgICAgb3ZlcndyaXRlTW9kZTogJ3JlcGxhY2UnLFxuICAgICAgICB9KSksXG4gICAgKTtcblxuICAgIEBJbnB1dCgnbWFzaycpXG4gICAgcHVibGljIHNldCBtYXNrU2V0dGVyKG1hc2s6IE1hc2tpdG9NYXNrIHwgc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubWFzay5zZXQodHVpSXNTdHJpbmcobWFzaykgPyBuZXcgUmVnRXhwKG1hc2spIDogbWFzayk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uQ2xpY2soaW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLmVsLmZvY3VzKCk7XG4gICAgICAgIHRoaXMuZWwuc2V0U2VsZWN0aW9uUmFuZ2UoaW5kZXgsIGluZGV4ICsgMSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uU2VsZWN0aW9uKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5lbC5zZWxlY3Rpb25TdGFydCA9PT0gdGhpcy5lbC5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZWwuc2V0U2VsZWN0aW9uUmFuZ2UodGhpcy5lbC5tYXhMZW5ndGggLSAxLCB0aGlzLmVsLm1heExlbmd0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgb25BcnJvdygpOiB2b2lkIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5lbC5zZWxlY3Rpb25TdGFydCA9PT0gdGhpcy5lbC5tYXhMZW5ndGggLSAxICYmXG4gICAgICAgICAgICB0aGlzLmVsLnNlbGVjdGlvbkVuZCA9PT0gdGhpcy5lbC5tYXhMZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmVsLnNldFNlbGVjdGlvblJhbmdlKHRoaXMuZWwubWF4TGVuZ3RoIC0gMiwgdGhpcy5lbC5tYXhMZW5ndGggLSAyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBpc0ZvY3VzZWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdHVpSXNOYXRpdmVGb2N1c2VkKHRoaXMuZWwpICYmXG4gICAgICAgICAgICAodGhpcy5lbC5zZWxlY3Rpb25TdGFydCA9PT0gaW5kZXggfHxcbiAgICAgICAgICAgICAgICAodGhpcy5lbC5zZWxlY3Rpb25TdGFydCA9PT0gdGhpcy5lbC5tYXhMZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPT09IHRoaXMuZWwubWF4TGVuZ3RoIC0gMSkpXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiPGRpdlxuICAgICp0dWlUZXh0ZmllbGRDb250ZW50XG4gICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuPlxuICAgIDxsYWJlbFxuICAgICAgICAqdHVpUmVwZWF0VGltZXM9XCJsZXQgaW5kZXggb2YgZWwubWF4TGVuZ3RoXCJcbiAgICAgICAgY2xhc3M9XCJ0LWl0ZW1cIlxuICAgICAgICBbdHVpQXBwZWFyYW5jZV09XCJhcHBlYXJhbmNlKClcIlxuICAgICAgICBbdHVpQXBwZWFyYW5jZUZvY3VzXT1cImlzRm9jdXNlZChpbmRleClcIlxuICAgICAgICBbdHVpQXBwZWFyYW5jZU1vZGVdPVwiY29udHJvbC5pbnZhbGlkICYmIGNvbnRyb2wudG91Y2hlZCA/ICdpbnZhbGlkJyA6IG51bGxcIlxuICAgICAgICAobW91c2Vkb3duLnByZXZlbnQpPVwib25DbGljayhpbmRleClcIlxuICAgID5cbiAgICAgICAgPHNwYW5cbiAgICAgICAgICAgIGNsYXNzPVwidC12YWx1ZVwiXG4gICAgICAgICAgICBbY2xhc3MudC12YWx1ZV9maWxsZWRdPVwiZWwudmFsdWVbaW5kZXhdXCJcbiAgICAgICAgICAgIFt0ZXh0Q29udGVudF09XCJlbC52YWx1ZVtpbmRleF0gfHwgZWwucGxhY2Vob2xkZXJbaW5kZXhdXCJcbiAgICAgICAgPjwvc3Bhbj5cbiAgICA8L2xhYmVsPlxuPC9kaXY+XG4iXX0=