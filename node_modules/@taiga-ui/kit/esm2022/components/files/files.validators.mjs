import { coerceArray } from '@angular/cdk/coercion';
export const TUI_SIZE_ERROR = 'tuiSize';
export const TUI_FORMAT_ERROR = 'tuiFormat';
export function tuiCreateFileSizeValidator(size) {
    return ({ value }) => {
        const files = value && coerceArray(value);
        const $implicit = value && files?.filter((file) => file.size > size);
        return $implicit?.length ? { [TUI_SIZE_ERROR]: { $implicit, size } } : null;
    };
}
export function tuiCreateFileFormatValidator(accept) {
    return ({ value }) => {
        const files = value && coerceArray(value);
        const formats = toArray(accept);
        const $implicit = value && files?.filter((file) => !checkFormat(file, formats));
        return $implicit?.length && accept ? { [TUI_FORMAT_ERROR]: { $implicit } } : null;
    };
}
function checkFormat({ name, type }, formats) {
    const extension = `.${(name.split('.').pop() || '').toLowerCase()}`;
    return formats.some((format) => format === extension ||
        format === type ||
        (format.split('/')[1] === '*' &&
            type?.split('/')[0] === format.split('/')[0]));
}
function toArray(accept) {
    return accept
        .toLowerCase()
        .split(',')
        .map((format) => format.trim().toLowerCase());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXMudmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2ZpbGVzL2ZpbGVzLnZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBSWxELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUM7QUFDeEMsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsV0FBVyxDQUFDO0FBVTVDLE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxJQUFZO0lBQ25ELE9BQU8sQ0FBQyxFQUFDLEtBQUssRUFBeUMsRUFBd0IsRUFBRTtRQUM3RSxNQUFNLEtBQUssR0FBRyxLQUFLLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFDLE1BQU0sU0FBUyxHQUFHLEtBQUssSUFBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO1FBRXJFLE9BQU8sU0FBUyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUMsU0FBUyxFQUFFLElBQUksRUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM1RSxDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsTUFBTSxVQUFVLDRCQUE0QixDQUFDLE1BQWM7SUFDdkQsT0FBTyxDQUFDLEVBQUMsS0FBSyxFQUF5QyxFQUEwQixFQUFFO1FBQy9FLE1BQU0sS0FBSyxHQUFHLEtBQUssSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLEtBQUssSUFBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUVoRixPQUFPLFNBQVMsRUFBRSxNQUFNLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFDLFNBQVMsRUFBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNsRixDQUFDLENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFPLEVBQUUsT0FBMEI7SUFDL0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQztJQUVwRSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2YsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNQLE1BQU0sS0FBSyxTQUFTO1FBQ3BCLE1BQU0sS0FBSyxJQUFJO1FBQ2YsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUc7WUFDekIsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3hELENBQUM7QUFDTixDQUFDO0FBRUQsU0FBUyxPQUFPLENBQUMsTUFBYztJQUMzQixPQUFPLE1BQU07U0FDUixXQUFXLEVBQUU7U0FDYixLQUFLLENBQUMsR0FBRyxDQUFDO1NBQ1YsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN0RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjb2VyY2VBcnJheX0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB0eXBlIHtWYWxpZGF0b3JGbn0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHR5cGUge1R1aUNvbnRleHR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgVFVJX1NJWkVfRVJST1IgPSAndHVpU2l6ZSc7XG5leHBvcnQgY29uc3QgVFVJX0ZPUk1BVF9FUlJPUiA9ICd0dWlGb3JtYXQnO1xuXG5pbnRlcmZhY2UgRmlsZUZvcm1hdEVycm9yIHtcbiAgICBbVFVJX0ZPUk1BVF9FUlJPUl06IFR1aUNvbnRleHQ8RmlsZVtdPjtcbn1cblxuaW50ZXJmYWNlIEZpbGVTaXplRXJyb3Ige1xuICAgIFtUVUlfU0laRV9FUlJPUl06IFR1aUNvbnRleHQ8RmlsZVtdPiAmIHtzaXplOiBudW1iZXJ9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpQ3JlYXRlRmlsZVNpemVWYWxpZGF0b3Ioc2l6ZTogbnVtYmVyKTogVmFsaWRhdG9yRm4ge1xuICAgIHJldHVybiAoe3ZhbHVlfToge3ZhbHVlOiBGaWxlIHwgcmVhZG9ubHkgRmlsZVtdIHwgbnVsbH0pOiBGaWxlU2l6ZUVycm9yIHwgbnVsbCA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gdmFsdWUgJiYgY29lcmNlQXJyYXkodmFsdWUpO1xuICAgICAgICBjb25zdCAkaW1wbGljaXQgPSB2YWx1ZSAmJiBmaWxlcz8uZmlsdGVyKChmaWxlKSA9PiBmaWxlLnNpemUgPiBzaXplKTtcblxuICAgICAgICByZXR1cm4gJGltcGxpY2l0Py5sZW5ndGggPyB7W1RVSV9TSVpFX0VSUk9SXTogeyRpbXBsaWNpdCwgc2l6ZX19IDogbnVsbDtcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHVpQ3JlYXRlRmlsZUZvcm1hdFZhbGlkYXRvcihhY2NlcHQ6IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcbiAgICByZXR1cm4gKHt2YWx1ZX06IHt2YWx1ZTogRmlsZSB8IHJlYWRvbmx5IEZpbGVbXSB8IG51bGx9KTogRmlsZUZvcm1hdEVycm9yIHwgbnVsbCA9PiB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gdmFsdWUgJiYgY29lcmNlQXJyYXkodmFsdWUpO1xuICAgICAgICBjb25zdCBmb3JtYXRzID0gdG9BcnJheShhY2NlcHQpO1xuICAgICAgICBjb25zdCAkaW1wbGljaXQgPSB2YWx1ZSAmJiBmaWxlcz8uZmlsdGVyKChmaWxlKSA9PiAhY2hlY2tGb3JtYXQoZmlsZSwgZm9ybWF0cykpO1xuXG4gICAgICAgIHJldHVybiAkaW1wbGljaXQ/Lmxlbmd0aCAmJiBhY2NlcHQgPyB7W1RVSV9GT1JNQVRfRVJST1JdOiB7JGltcGxpY2l0fX0gOiBudWxsO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9ybWF0KHtuYW1lLCB0eXBlfTogRmlsZSwgZm9ybWF0czogcmVhZG9ubHkgc3RyaW5nW10pOiBib29sZWFuIHtcbiAgICBjb25zdCBleHRlbnNpb24gPSBgLiR7KG5hbWUuc3BsaXQoJy4nKS5wb3AoKSB8fCAnJykudG9Mb3dlckNhc2UoKX1gO1xuXG4gICAgcmV0dXJuIGZvcm1hdHMuc29tZShcbiAgICAgICAgKGZvcm1hdCkgPT5cbiAgICAgICAgICAgIGZvcm1hdCA9PT0gZXh0ZW5zaW9uIHx8XG4gICAgICAgICAgICBmb3JtYXQgPT09IHR5cGUgfHxcbiAgICAgICAgICAgIChmb3JtYXQuc3BsaXQoJy8nKVsxXSA9PT0gJyonICYmXG4gICAgICAgICAgICAgICAgdHlwZT8uc3BsaXQoJy8nKVswXSA9PT0gZm9ybWF0LnNwbGl0KCcvJylbMF0pLFxuICAgICk7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkoYWNjZXB0OiBzdHJpbmcpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIGFjY2VwdFxuICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAubWFwKChmb3JtYXQpID0+IGZvcm1hdC50cmltKCkudG9Mb3dlckNhc2UoKSk7XG59XG4iXX0=