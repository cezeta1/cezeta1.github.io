import type { MaskitoOptions } from '@maskito/core';
import { TuiControl } from '@taiga-ui/cdk/classes';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/textfield";
import * as i2 from "@maskito/angular";
export declare class TuiInputNumber extends TuiControl<number | null> {
    private readonly isIOS;
    private readonly numberFormat;
    private readonly precision;
    private readonly isIntermediateState;
    protected readonly onChangeEffect: import("@angular/core").EffectRef;
    protected readonly options: import("./input-number.options").TuiInputNumberOptions;
    protected readonly min: import("@angular/core").WritableSignal<number>;
    protected readonly max: import("@angular/core").WritableSignal<number>;
    protected readonly step: import("@angular/core").WritableSignal<number>;
    protected readonly prefix: import("@angular/core").WritableSignal<string>;
    protected readonly postfix: import("@angular/core").WritableSignal<string>;
    protected readonly textfieldOptions: import("@taiga-ui/core/components/textfield").TuiTextfieldOptions;
    protected readonly element: HTMLInputElement;
    protected readonly textfieldValue: import("@angular/core").WritableSignal<string>;
    protected readonly inputMode: import("@angular/core").Signal<"text" | "decimal" | "numeric">;
    protected readonly maxLength: import("@angular/core").Signal<number>;
    protected readonly mask: import("@angular/core").Signal<MaskitoOptions | null>;
    set minSetter(x: number | null);
    set maxSetter(x: number | null);
    set prefixSetter(x: string);
    set postfixSetter(x: string);
    set stepSetter(x: number);
    writeValue(value: number | null): void;
    protected onBlur(): void;
    protected onFocus(): void;
    protected onStep(step: number): void;
    private formatNumber;
    private updateMinMaxLimits;
    private computeMask;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputNumber, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputNumber, "input[tuiInputNumber]", never, { "minSetter": { "alias": "min"; "required": false; }; "maxSetter": { "alias": "max"; "required": false; }; "prefixSetter": { "alias": "prefix"; "required": false; }; "postfixSetter": { "alias": "postfix"; "required": false; }; "stepSetter": { "alias": "step"; "required": false; }; }, {}, never, never, true, [{ directive: typeof i1.TuiWithTextfield; inputs: {}; outputs: {}; }, { directive: typeof i2.MaskitoDirective; inputs: {}; outputs: {}; }]>;
}
