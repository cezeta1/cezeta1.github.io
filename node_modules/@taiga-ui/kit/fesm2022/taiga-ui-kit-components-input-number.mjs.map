{"version":3,"file":"taiga-ui-kit-components-input-number.mjs","sources":["../../../projects/kit/components/input-number/input-number.options.ts","../../../projects/kit/components/input-number/input-number.component.ts","../../../projects/kit/components/input-number/input-number.template.html","../../../projects/kit/components/input-number/taiga-ui-kit-components-input-number.ts"],"sourcesContent":["import type {TuiValueTransformer} from '@taiga-ui/cdk/classes';\nimport {tuiCreateOptions} from '@taiga-ui/cdk/utils/di';\n\nexport interface TuiInputNumberOptions {\n    readonly max: number;\n    readonly min: number;\n    readonly prefix: string;\n    readonly postfix: string;\n    readonly step: number;\n    readonly icons: Readonly<{\n        decrease: string;\n        increase: string;\n    }>;\n    readonly valueTransformer: TuiValueTransformer<number | null> | null;\n}\n\nexport const TUI_INPUT_NUMBER_DEFAULT_OPTIONS: TuiInputNumberOptions = {\n    min: Number.MIN_SAFE_INTEGER,\n    max: Number.MAX_SAFE_INTEGER,\n    prefix: '',\n    postfix: '',\n    step: 0,\n    icons: {\n        increase: '@tui.plus',\n        decrease: '@tui.minus',\n    },\n    valueTransformer: null,\n};\n\nexport const [TUI_INPUT_NUMBER_OPTIONS, tuiInputNumberOptionsProvider] = tuiCreateOptions(\n    TUI_INPUT_NUMBER_DEFAULT_OPTIONS,\n);\n","import {NgIf} from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    computed,\n    effect,\n    inject,\n    Input,\n    signal,\n    ViewEncapsulation,\n} from '@angular/core';\nimport {toSignal} from '@angular/core/rxjs-interop';\nimport {MaskitoDirective} from '@maskito/angular';\nimport type {MaskitoOptions} from '@maskito/core';\nimport {maskitoInitialCalibrationPlugin} from '@maskito/core';\nimport {\n    maskitoCaretGuard,\n    maskitoNumberOptionsGenerator,\n    maskitoParseNumber,\n} from '@maskito/kit';\nimport {tuiAsControl, TuiControl, tuiValueTransformerFrom} from '@taiga-ui/cdk/classes';\nimport {CHAR_HYPHEN, CHAR_MINUS, TUI_ALLOW_SIGNAL_WRITES} from '@taiga-ui/cdk/constants';\nimport {TUI_IS_IOS, tuiFallbackValueProvider} from '@taiga-ui/cdk/tokens';\nimport {tuiInjectElement, tuiValueBinding} from '@taiga-ui/cdk/utils/dom';\nimport {tuiClamp, tuiIsSafeToRound} from '@taiga-ui/cdk/utils/math';\nimport {TuiButton} from '@taiga-ui/core/components/button';\nimport {\n    TUI_TEXTFIELD_OPTIONS,\n    TuiTextfieldContent,\n    TuiWithTextfield,\n} from '@taiga-ui/core/components/textfield';\nimport {TUI_DEFAULT_NUMBER_FORMAT, TUI_NUMBER_FORMAT} from '@taiga-ui/core/tokens';\nimport {tuiFormatNumber} from '@taiga-ui/core/utils/format';\nimport {tuiMaskito} from '@taiga-ui/kit/utils';\n\nimport {TUI_INPUT_NUMBER_OPTIONS} from './input-number.options';\n\nconst DEFAULT_MAX_LENGTH = 18;\n\n@Component({\n    standalone: true,\n    selector: 'input[tuiInputNumber]',\n    imports: [NgIf, TuiButton, TuiTextfieldContent],\n    templateUrl: './input-number.template.html',\n    styleUrls: ['./input-number.style.less'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        tuiAsControl(TuiInputNumber),\n        tuiFallbackValueProvider(null),\n        tuiValueTransformerFrom(TUI_INPUT_NUMBER_OPTIONS),\n    ],\n    hostDirectives: [TuiWithTextfield, MaskitoDirective],\n    host: {\n        '[disabled]': 'disabled()',\n        '[attr.inputMode]': 'inputMode()',\n        '[attr.maxLength]': 'maxLength()',\n        '(input)': 'textfieldValue.set(element.value)',\n        '(blur)': 'onBlur()',\n        '(focus)': 'onFocus()',\n        '(keydown.arrowDown)': 'onStep(-step())',\n        '(keydown.arrowUp)': 'onStep(step())',\n        '[class._with-buttons]': 'step()',\n    },\n})\nexport class TuiInputNumber extends TuiControl<number | null> {\n    private readonly isIOS = inject(TUI_IS_IOS);\n    private readonly numberFormat = toSignal(inject(TUI_NUMBER_FORMAT), {\n        initialValue: TUI_DEFAULT_NUMBER_FORMAT,\n    });\n\n    private readonly precision = computed(() =>\n        Number.isNaN(this.numberFormat().precision) ? 2 : this.numberFormat().precision,\n    );\n\n    private readonly isIntermediateState = computed(() => {\n        const value = maskitoParseNumber(\n            this.textfieldValue(),\n            this.numberFormat().decimalSeparator,\n        );\n\n        return value < 0 ? value > this.max() : value < this.min();\n    });\n\n    protected readonly onChangeEffect = effect(() => {\n        const value = maskitoParseNumber(\n            this.textfieldValue(),\n            this.numberFormat().decimalSeparator,\n        );\n\n        if (Number.isNaN(value)) {\n            this.onChange(null);\n\n            return;\n        }\n\n        if (\n            this.isIntermediateState() ||\n            value < this.min() ||\n            value > this.max() ||\n            this.value() === value\n        ) {\n            return;\n        }\n\n        this.onChange(value);\n    }, TUI_ALLOW_SIGNAL_WRITES);\n\n    protected readonly options = inject(TUI_INPUT_NUMBER_OPTIONS);\n    protected readonly min = signal(this.options.min);\n    protected readonly max = signal(this.options.max);\n    protected readonly step = signal(this.options.step);\n    protected readonly prefix = signal(this.options.prefix);\n    protected readonly postfix = signal(this.options.postfix);\n    protected readonly textfieldOptions = inject(TUI_TEXTFIELD_OPTIONS);\n    protected readonly element = tuiInjectElement<HTMLInputElement>();\n    protected readonly textfieldValue = tuiValueBinding();\n\n    protected readonly inputMode = computed(() => {\n        if (this.isIOS && this.min() < 0) {\n            // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'\n            return 'text';\n        }\n\n        return this.precision() ? 'decimal' : 'numeric';\n    });\n\n    protected readonly maxLength = computed(() => {\n        const {decimalSeparator, thousandSeparator} = this.numberFormat();\n        const decimalPart =\n            !!this.precision() && this.textfieldValue().includes(decimalSeparator);\n        const precision = decimalPart ? Math.min(this.precision() + 1, 20) : 0;\n        const takeThousand = thousandSeparator.repeat(5).length;\n\n        return DEFAULT_MAX_LENGTH + precision + takeThousand;\n    });\n\n    protected readonly mask = tuiMaskito(\n        computed(({decimalMode, ...numberFormat} = this.numberFormat()) =>\n            this.computeMask({\n                ...numberFormat,\n                precision: this.precision(),\n                min: this.min(),\n                max: this.max(),\n                prefix: this.prefix(),\n                postfix: this.postfix(),\n                decimalZeroPadding: decimalMode === 'always',\n            }),\n        ),\n    );\n\n    @Input('min')\n    public set minSetter(x: number | null) {\n        this.updateMinMaxLimits(x, this.max());\n    }\n\n    @Input('max')\n    public set maxSetter(x: number | null) {\n        this.updateMinMaxLimits(this.min(), x);\n    }\n\n    // TODO(v5): replace with signal input\n    @Input('prefix')\n    public set prefixSetter(x: string) {\n        this.prefix.set(x);\n    }\n\n    // TODO(v5): replace with signal input\n    @Input('postfix')\n    public set postfixSetter(x: string) {\n        this.postfix.set(x);\n    }\n\n    // TODO(v5): replace with signal input\n    @Input('step')\n    public set stepSetter(x: number) {\n        this.step.set(x);\n    }\n\n    public override writeValue(value: number | null): void {\n        super.writeValue(value);\n        this.textfieldValue.set(this.formatNumber(this.value()));\n    }\n\n    protected onBlur(): void {\n        this.onTouched();\n\n        if (!this.isIntermediateState()) {\n            this.textfieldValue.set(this.formatNumber(this.value()));\n        }\n    }\n\n    protected onFocus(): void {\n        const value = maskitoParseNumber(\n            this.textfieldValue(),\n            this.numberFormat().decimalSeparator,\n        );\n\n        if (Number.isNaN(value) && !this.readOnly()) {\n            this.textfieldValue.set(this.prefix() + this.postfix());\n        }\n    }\n\n    protected onStep(step: number): void {\n        this.textfieldValue.set(\n            this.formatNumber(\n                tuiClamp((this.value() ?? 0) + step, this.min(), this.max()),\n            ),\n        );\n    }\n\n    private formatNumber(value: number | null): string {\n        if (value === null) {\n            return '';\n        }\n\n        return (\n            this.prefix() +\n            tuiFormatNumber(value, {\n                ...this.numberFormat(),\n                /**\n                 * Number can satisfy interval [Number.MIN_SAFE_INTEGER; Number.MAX_SAFE_INTEGER]\n                 * but its rounding can violate it.\n                 * Before BigInt support there is no perfect solution â€“ only trade off.\n                 * No rounding is better than lose precision and incorrect mutation of already valid value.\n                 */\n                precision: tuiIsSafeToRound(value, this.precision())\n                    ? this.precision()\n                    : Infinity,\n            }).replace(CHAR_HYPHEN, CHAR_MINUS) +\n            this.postfix()\n        );\n    }\n\n    private updateMinMaxLimits(\n        nullableMin: number | null,\n        nullableMax: number | null,\n    ): void {\n        const min =\n            this.transformer?.fromControlValue(nullableMin) ??\n            nullableMin ??\n            this.options.min;\n        const max =\n            this.transformer?.fromControlValue(nullableMax) ??\n            nullableMax ??\n            this.options.max;\n\n        this.min.set(Math.min(min, max));\n        this.max.set(Math.max(min, max));\n    }\n\n    private computeMask(\n        params: NonNullable<Parameters<typeof maskitoNumberOptionsGenerator>[0]>,\n    ): MaskitoOptions {\n        const {prefix = '', postfix = ''} = params;\n        const {plugins, ...options} = maskitoNumberOptionsGenerator(params);\n        const initialCalibrationPlugin = maskitoInitialCalibrationPlugin(\n            maskitoNumberOptionsGenerator({\n                ...params,\n                min: Number.MIN_SAFE_INTEGER,\n                max: Number.MAX_SAFE_INTEGER,\n            }),\n        );\n\n        return {\n            ...options,\n            plugins: [\n                ...plugins,\n                initialCalibrationPlugin,\n                maskitoCaretGuard((value) => [\n                    prefix.length,\n                    value.length - postfix.length,\n                ]),\n            ],\n        };\n    }\n}\n","<ng-container *tuiTextfieldContent>\n    <section\n        *ngIf=\"step()\"\n        class=\"t-input-number-buttons\"\n    >\n        <button\n            size=\"s\"\n            tabindex=\"-1\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-button\"\n            [appearance]=\"textfieldOptions.appearance()\"\n            [disabled]=\"!interactive() || value()! >= max()\"\n            [iconStart]=\"options.icons.increase\"\n            (click.prevent)=\"onStep(step())\"\n            (mousedown.prevent)=\"element.focus()\"\n        >\n            +\n        </button>\n\n        <button\n            size=\"s\"\n            tabindex=\"-1\"\n            tuiIconButton\n            type=\"button\"\n            class=\"t-button\"\n            [appearance]=\"textfieldOptions.appearance()\"\n            [disabled]=\"!interactive() || value()! <= min()\"\n            [iconStart]=\"options.icons.decrease\"\n            (click.prevent)=\"onStep(-step())\"\n            (mousedown.prevent)=\"element.focus()\"\n        >\n            -\n        </button>\n    </section>\n</ng-container>\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}